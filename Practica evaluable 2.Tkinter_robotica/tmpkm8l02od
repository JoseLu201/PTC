# capturar.py
import vrep
import sys
import os
import json
import time
import numpy as np
import cv2
import matplotlib.pyplot as plt
from vrep_manager import VrepManager


# Función para realizar la captura de datos
def capturar_datos(manager, situation_folder, filename, iterations=50, sleep_time=0.5):
    # Cambiar el directorio de trabajo
    manager.begin()
    _, resolution, image = vrep.simxGetVisionSensorImage(manager.clientID, manager.camhandle, 0, vrep.simx_opmode_streaming)
    time.sleep(1)
    if (os.path.isdir(situation_folder)):
        print("Error: ya existe el directorio "+ situation_folder)
        os.chdir(situation_folder)
    else:
        os.mkdir(situation_folder)
        os.chdir(situation_folder)
        print("Cambiando el directorio de trabajo: ", os.getcwd())
    

    # Crear el fichero JSON para guardar los datos del láser
    cabecera = {"TiempoSleep": sleep_time, "MaxIteraciones": iterations}
    with open(filename, "w") as fichero_laser:
        fichero_laser.write(json.dumps(cabecera) + '\n')

        for iteracion in range(1, iterations + 1):
            
            #Situamos donde queremos a la persona sentada, unidades en metros
            ret_code = vrep.simxSetObjectPosition(manager.clientID,manager.personhandle,-1,[1+2.0*iteracion/10, -0.4,0.0],vrep.simx_opmode_oneshot)
            print("Captura: " ,ret_code)
            print(manager.personhandle)
            print([1+2.0*iteracion/10, -0.4,0.0])
            #Cambiamos la orientacion, ojo está en radianes: Para pasar de grados a radianes hay que multiplicar por PI y dividir por 180
            # vrep.simxSetObjectOrientation(manager.clientID, manager.personhandle, -1, [0.0, 0.0 ,3.05-(0.20)*iteracion], vrep.simx_opmode_oneshot)
            
            puntosx = []  # Lista para coordenadas x
            puntosy = []  # Lista para coordenadas y
            puntosz = []  # Lista para coordenadas z
            _, signalValue = vrep.simxGetStringSignal(manager.clientID, 'LaserData', vrep.simx_opmode_buffer)
            datosLaser = vrep.simxUnpackFloats(signalValue)

            # Procesar datos del láser
            for indice in range(0, len(datosLaser), 3):
                puntosx.append(datosLaser[indice + 1])
                puntosy.append(datosLaser[indice + 2])
                puntosz.append(datosLaser[indice])

            # Guardar los puntos x, y en el fichero JSON
            lectura = {"Iteracion": iteracion, "PuntosX": puntosx, "PuntosY": puntosy}
            #print(lectura)
            fichero_laser.write(json.dumps(lectura) + '\n')

            # Guardar frame de la cámara
            if iteracion == 1 or iteracion == iterations:
                _, resolution, image=vrep.simxGetVisionSensorImage(manager.clientID, manager.camhandle, 0, vrep.simx_opmode_buffer)
                print("imgae:")
                
                try:
                    img = np.array(image, dtype=np.uint8)
                    img.resize([resolution[0], resolution[1], 3])
                    img = np.rot90(img, 2)
                    img = np.fliplr(img)
                    img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
        
                    # Salvar a disco la imagen
                    cv2.imwrite(f'{situation_folder}Iteracion{iteracion}.jpg', img)
                except Exception:
                    print("Error intentando montar la imagen")
                    pass
                

            # Esperar
            time.sleep(sleep_time)

    # Cambiar de nuevo al directorio original
    os.chdir('..')
    
